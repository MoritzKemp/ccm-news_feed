const CACHE_NAME="ccm-news-feed-v1",cache_urls={"https://MoritzKemp.github.io/ccm-news_feed/ccm.news_feed.js":"cacheFailNetwork","https://MoritzKemp.github.io/ccm-news_feed/style.css":"cacheFailNetwork"};let idb;self.addEventListener("fetch",e=>{let t=new URL(e.request.url);switch(cache_urls[t.href]){case"cacheOnly":e.respondWith(caches.match(e.request));break;case"networkOnly":e.respondWith(fetch(e.request));break;case"cacheFailNetwork":e.respondWith(caches.match(e.request).then(function(t){return t||fetch(e.request)}));break;case"networkFailCache":e.respondWith(fetch(e.request).catch(function(){return caches.match(e.request)}));break;default:e.respondWith(fetch(e.request))}}),self.addEventListener("install",e=>{e.waitUntil(caches.open(CACHE_NAME).then(e=>{for(let t in cache_urls)e.add(t)}))}),self.addEventListener("activate",e=>{e.waitUntil(Promise.all([caches.keys().then(e=>Promise.all(e.map(e=>{if(CACHE_NAME!==e&&e.startsWith("ccm-news-feed-"))return caches.delete(e)}))),openDatabase("newsFeed","2")]))}),self.addEventListener("sync",e=>{"new-post"===e.tag&&e.waitUntil(objectStore(idb,"waiting-posts","readwrite").then(e=>getAllObjects(e)).then(e=>Promise.all(e.map(e=>fetch(e.url).then(function(t){if(t.ok)return deleteObject(e.id);reject(new Error("Could not send post with id: "+e.id))})))).then(()=>{notifyPages()}))}),self.addEventListener("message",e=>{switch(console.log("[SW-News-Feed] Message: ",e),e.data.tag){case"new-post":handleNewPost(e.data.request);break;case"waiting-posts":sendWaitingPostsToRequester(e.source);break;default:console.log("No handler in sw for event:",e)}});const notifyPages=function(){self.clients.matchAll({includeUncontrolled:!0}).then(function(e){e.forEach(function(e){e.postMessage({tag:"posts-shipped"})})})},sendWaitingPostsToRequester=function(e){objectStore(idb,"waiting-posts","readwrite").then(e=>getAllObjects(e)).then(t=>{let n=[];t.forEach(e=>{n.push(e.url)}),e.postMessage({tag:"waiting-posts",waitingPosts:n})})},handleNewPost=function(e){return fetch(e).then(e=>{notifyPages()}).catch(()=>{objectStore(idb,"waiting-posts","readwrite").then(t=>{addObject(t,{url:e,id:Math.floor(1e3*Math.random()+1)})}).then(()=>{self.registration.sync.register("new-post")}).catch(e=>{console.log("Error: ",e)})})},openDatabase=function(e,t){return new Promise((n,s)=>{const o=self.indexedDB.open(e,t);o.onerror=function(e){s("Database error: "+e.target.error)},o.onupgradeneeded=function(e){let t=e.target.result;t.createObjectStore("waiting-posts",{keyPath:"id",autoIncrement:!0}),idb=t},o.onsuccess=function(e){idb=e.target.result,n(e.target.result)}})},objectStore=function(e,t,n){return new Promise((s,o)=>{let r={};idb?r=e.transaction(t,n).objectStore(t):openDatabase("newsFeed","2").then(()=>{r=e.transaction(t,n).objectStore(t)}),s(r)})},addObject=function(e,t){return new Promise((n,s)=>{e.add(t).onsuccess=n})},getAllObjects=function(e){return new Promise(function(t,n){let s=e.getAll();s.onsuccess=function(e){t(e.target.result)},s.onerror=function(){n("Could not get all posts: "+s.error)}})},deleteObject=function(e){return new Promise((t,n)=>{objectStore(idb,"waiting-posts","readwrite").then(function(n){n.delete(e).onsuccess=function(n){console.log("Delete successfull:",e),t("Successfull delete key: "+e)}})})};