const DB_NAME="newsFeed",DB_VERSION="2",SEND_POST_STORE="send-post-requests",GET_POSTS_STORE="get-posts-requests";let idb;const MSG_FROM_PAGE_GET_POSTS="get-posts",MSG_FROM_PAGE_SEND_POST="send-post",MSG_TO_PAGE_GOT_POSTS="got-posts",MSG_TO_PAGE_POSTS_SENT="posts-sent",SYNC_SEND_POSTS="send-posts",SYNC_GET_POSTS="get-posts",CACHE_NAME="ccm-news-feed-v3",cache_urls={"https://akless.github.io/ccm/ccm.js":"cacheFailNetwork","https://MoritzKemp.github.io/ccm-news_feed/":"networkFailCache","https://MoritzKemp.github.io/ccm-news_feed/ccm.news_feed.js":"networkFailCache","https://MoritzKemp.github.io/ccm-news_feed/style.css":"cacheFailNetwork"};self.addEventListener("fetch",e=>{let t=new URL(e.request.url);switch(cache_urls[t.href]){case"cacheOnly":e.respondWith(caches.match(e.request));break;case"networkOnly":e.respondWith(fetch(e.request));break;case"cacheFailNetwork":e.respondWith(caches.match(e.request).then(t=>t||fetch(e.request)));break;case"networkFailCache":e.respondWith(fetch(e.request).catch(()=>caches.match(e.request)));break;default:e.respondWith(fetch(e.request))}}),self.addEventListener("install",e=>{e.waitUntil(caches.open(CACHE_NAME).then(e=>{for(let t in cache_urls)e.add(t)}))}),self.addEventListener("activate",e=>{e.waitUntil(Promise.all([caches.keys().then(e=>Promise.all(e.map(e=>{if(CACHE_NAME!==e&&e.startsWith("ccm-news-feed-"))return caches.delete(e)}))),openDatabase("newsFeed","2")]))}),self.addEventListener("sync",e=>{"send-posts"===e.tag&&e.waitUntil(objectStore(SEND_POST_STORE,"readwrite").then(e=>getAllObjects(e)).then(e=>Promise.all(e.map(e=>fetch(e.url).then(function(t){if(t.ok)return deleteObject(e.id,SEND_POST_STORE);reject(new Error("Could not send post with id: "+e.id))}).catch(()=>{reject(new Error("Seems to be still offline."))})))).then(()=>{notifyPagesPostsSent()})),"get-posts"===e.tag&&e.waitUntil(objectStore(GET_POSTS_STORE,"readwrite").then(e=>getAllObjects(e)).then(e=>Promise.all(e.map(e=>fetch(e.url).then(t=>{if(t.ok)return deleteObject(e.id,GET_POSTS_STORE),t.json();new Error("Could not perform get-posts-request with id:"+e.id)}).then(e=>{notifyPagesGotPosts(e)}).catch(()=>new Error("Seems to be still offline."))))))}),self.addEventListener("message",e=>{switch(console.log("[SW-News-Feed] Message: ",e),e.data.tag){case"send-post":sendNewPost(e.data.url);break;case"get-posts":getPosts(e.data.url);break;default:console.log("No handler in sw for event:",e)}});const sendNewPost=e=>{fetch(e).then(e=>{notifyPagesPostsSent()}).catch(()=>{objectStore(SEND_POST_STORE,"readwrite").then(t=>{addObject(t,{url:e,id:Math.floor(1e3*Math.random()+1)})}).then(()=>{self.registration.sync.register("send-posts")}).catch(e=>{console.log("Error: ",e)})})},getPosts=e=>{fetch(e).then(e=>e.json()).then(e=>{notifyPagesGotPosts(e)}).catch(()=>{objectStore(GET_POSTS_STORE,"readwrite").then(t=>{addObject(t,{url:e,id:Math.floor(1e3*Math.random()+1)})}).then(()=>{self.registration.sync.register("get-posts")}).catch(e=>{console.log("Error: ",e)})})},notifyPagesPostsSent=()=>{self.clients.matchAll({includeUncontrolled:!0}).then(function(e){e.forEach(function(e){e.postMessage({tag:"posts-sent"})})})},notifyPagesGotPosts=e=>{self.clients.matchAll({includeUncontrolled:!0}).then(function(t){t.forEach(function(t){t.postMessage({tag:"got-posts",posts:e})})})},openDatabase=function(e,t){return new Promise((s,n)=>{const o=self.indexedDB.open(e,t);o.onerror=function(e){n("Database error: "+e.target.error)},o.onupgradeneeded=function(e){let t=e.target.result;t.createObjectStore(GET_POSTS_STORE,{keyPath:"id",autoIncrement:!0}),t.createObjectStore(SEND_POST_STORE,{keyPath:"id",autoIncrement:!0}),idb=t},o.onsuccess=function(e){idb=e.target.result,s(e.target.result)}})},objectStore=function(e,t){return new Promise((s,n)=>{let o={};idb?o=idb.transaction(e,t).objectStore(e):openDatabase(DB_NAME,"2").then(()=>{o=idb.transaction(e,t).objectStore(e)}),s(o)})},addObject=function(e,t){return new Promise((s,n)=>{e.add(t).onsuccess=s})},getAllObjects=function(e){return new Promise(function(t,s){let n=e.getAll();n.onsuccess=function(e){t(e.target.result)},n.onerror=function(){s("Could not get all posts: "+n.error)}})},deleteObject=function(e,t){return new Promise((s,n)=>{objectStore(t,"readwrite").then(function(t){t.delete(e).onsuccess=function(t){console.log("Delete successfull:",e),s("Successfull delete key: "+e)}})})};